(function (internal) {
  'use strict';

  /* src/App.svelte generated by Svelte v3.58.0 */
  const file = "src/App.svelte";
  function create_fragment(ctx) {
      let div0;
      let t1;
      let div1;
      const block = {
          c: function create() {
              div0 = internal.element("div");
              div0.textContent = "TESTTT";
              t1 = internal.space();
              div1 = internal.element("div");
              internal.add_location(div0, file, 2, 0, 29);
              internal.attr_dev(div1, "id", "sigma-container");
              internal.add_location(div1, file, 3, 0, 47);
          },
          l: function claim(nodes) {
              throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
          },
          m: function mount(target, anchor) {
              internal.insert_dev(target, div0, anchor);
              internal.insert_dev(target, t1, anchor);
              internal.insert_dev(target, div1, anchor);
          },
          p: internal.noop,
          i: internal.noop,
          o: internal.noop,
          d: function destroy(detaching) {
              if (detaching)
                  internal.detach_dev(div0);
              if (detaching)
                  internal.detach_dev(t1);
              if (detaching)
                  internal.detach_dev(div1);
          }
      };
      internal.dispatch_dev("SvelteRegisterBlock", {
          block,
          id: create_fragment.name,
          type: "component",
          source: "",
          ctx
      });
      return block;
  }
  function instance($$self, $$props) {
      let { $$slots: slots = {}, $$scope } = $$props;
      internal.validate_slots('App', slots, []);
      const writable_props = [];
      Object.keys($$props).forEach(key => {
          if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot')
              console.warn(`<App> was created with unknown prop '${key}'`);
      });
      return [];
  }
  class App extends internal.SvelteComponentDev {
      constructor(options) {
          super(options);
          internal.init(this, options, instance, create_fragment, internal.safe_not_equal, {});
          internal.dispatch_dev("SvelteRegisterComponent", {
              component: this,
              tagName: "App",
              options,
              id: create_fragment.name
          });
      }
  }

  const app = new App({
      target: document.body
  });

  return app;

})(internal);
//# sourceMappingURL=main.js.map
